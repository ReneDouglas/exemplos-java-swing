package JogoEducacional;

import javax.swing.*;

public class Main {
    public static void main(String[] args) {
        JFrame frame = new JFrame("Jogo Educacional RPG");
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        frame.setSize(800, 600);
        frame.setResizable(false);

        GamePanel gamePanel = new GamePanel(frame);
        frame.add(gamePanel);

        frame.setVisible(true);
    }
}

package JogoEducacional;
import javax.swing.*;
import java.awt.*;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import javax.imageio.ImageIO;
import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

public class GamePanel extends JPanel implements KeyListener {
    private Player player;
    private NPC[] npcs;
    private String currentMessage; // Armazena a mensagem atual a ser exibida
    private NPC currentNpc; // Armazena o NPC atual que está interagindo
    private Image backgroundImage; // Imagem de fundo do mapa
    private String dialogMessage; // Mensagem atual do diálogo
    private boolean isDialogActive; // Indica se o diálogo está ativo

    // Lista de blocos de colisão
    private List<CollisionBlock> collisionBlocks;

    // Referência para o JFrame principal
    private JFrame parentFrame;

    public GamePanel(JFrame parentFrame) {
        this.parentFrame = parentFrame;
        this.setPreferredSize(new Dimension(800, 600));
        this.setBackground(Color.BLACK); // Fundo preto (será coberto pela imagem)
        this.setFocusable(true);
        this.addKeyListener(this);

        player = new Player(400, 300);

        // Criando NPCs
        npcs = new NPC[]{
            new IfElseNPC(200, 200),
            new Professor(520, 390), // Novo NPC Professor
            // new Placa1(170, 400, 10), //placa meme
            // Adicione mais NPCs aqui
        };

        // Inicializa a lista de blocos de colisão
        collisionBlocks = new ArrayList<>();

        // Adiciona blocos de colisão para as bordas do mapa
        collisionBlocks.add(new CollisionBlock(0, 0, 390, 40)); // Borda superior1
        collisionBlocks.add(new CollisionBlock(450, 0, 280, 40));// Borda superior2
        collisionBlocks.add(new CollisionBlock(0, 550, 800, 20)); // Borda inferior
        collisionBlocks.add(new CollisionBlock(10, 0, 50, 600)); // Borda esquerda
        collisionBlocks.add(new CollisionBlock(720, 0, 50, 620)); // Borda direita
        collisionBlocks.add(new CollisionBlock(230, 480, 120, 60)); //agua mapa
        collisionBlocks.add(new CollisionBlock(170, 310, 150, 20)); //placa1
        collisionBlocks.add(new CollisionBlock(170, 390, 20, 20)); //placa 1.2
        collisionBlocks.add(new CollisionBlock(430, 450, 190, 10));// placa 2

        collisionBlocks.add(new CollisionBlock(170, 100, 155, 110)); //casa 1
        collisionBlocks.add(new CollisionBlock(140, 180, 30, 30)); // caixa correio c1
        collisionBlocks.add(new CollisionBlock(460, 100, 155, 110)); // casa 2
        collisionBlocks.add(new CollisionBlock(430, 180, 30, 25)); // caixa correio c2
        collisionBlocks.add(new CollisionBlock(430, 270, 220, 110)); // escola

        // Adiciona um espaço de saída na borda superior
        for (int x = 390; x <= 420; x += 10) {
            collisionBlocks.add(new CollisionBlock(x, 0, 10, 20)); // Blocos na borda superior
        }

        // Carregar a imagem de fundo
        try {
            backgroundImage = ImageIO.read(new File("Imagens\\TownMap!.png")); // Substitua pelo caminho da sua imagem
        } catch (IOException e) {
            e.printStackTrace();
            System.out.println("Erro ao carregar a imagem de fundo.");
        }
    }

    // Método para verificar colisões
    private boolean isColliding(Rectangle bounds) {
        for (CollisionBlock block : collisionBlocks) {
            if (block.getBounds().intersects(bounds)) {
                return true; // Há colisão
            }
        }
        return false; // Não há colisão
    }

    @Override
    protected void paintComponent(Graphics g) {
        super.paintComponent(g);

        // Desenha a imagem de fundo redimensionada para ocupar toda a tela
        if (backgroundImage != null) {
            g.drawImage(backgroundImage, 0, 0, getWidth(), getHeight(), this);
        }

        // Desenha os blocos de colisão
        for (CollisionBlock block : collisionBlocks) {
            block.draw(g);
        }

        // Desenha o jogador
        player.draw(g);

        // Desenha os NPCs
        for (NPC npc : npcs) {
            npc.draw(g);

            // Verifica se o jogador está perto do NPC
            if (npc.isPlayerNear(player.getX(), player.getY())) {
                currentMessage = npc.getMessage(); // Atualiza a mensagem atual
                currentNpc = npc; // Armazena o NPC atual
            }
        }

        // Exibe a mensagem atual na tela, acima do NPC
        if (currentMessage != null && currentNpc != null) {
            g.setColor(Color.WHITE); // Cor do texto
            g.drawString(currentMessage, currentNpc.getX(), currentNpc.getY() - 10); // Texto acima do NPC
        }

        // Desenha a caixa de diálogo se estiver ativa
        if (isDialogActive) {
            drawDialogBox(g);
        }
    }

    // Método para desenhar a caixa de diálogo
    private void drawDialogBox(Graphics g) {
        int boxWidth = getWidth() - 40; // Largura da caixa de diálogo
        int boxHeight = 100; // Altura da caixa de diálogo
        int boxX = 20; // Posição X da caixa de diálogo
        int boxY = getHeight() - boxHeight - 20; // Posição Y da caixa de diálogo

        // Desenha o fundo da caixa de diálogo
        g.setColor(new Color(0, 0, 0, 200)); // Preto semi-transparente
        g.fillRect(boxX, boxY, boxWidth, boxHeight);

        // Desenha a borda da caixa de diálogo
        g.setColor(Color.WHITE);
        g.drawRect(boxX, boxY, boxWidth, boxHeight);

        // Desenha a mensagem do diálogo
        g.setColor(Color.WHITE);
        Font font = new Font("Arial", Font.PLAIN, 16);
        g.setFont(font);

        // Quebra a mensagem em várias linhas se necessário
        String[] lines = dialogMessage.split("\n");
        int lineHeight = g.getFontMetrics().getHeight();
        int textY = boxY + 30;

        for (String line : lines) {
            g.drawString(line, boxX + 20, textY);
            textY += lineHeight;
        }
    }

    @Override
    public void keyPressed(KeyEvent e) {
        int key = e.getKeyCode();

        int newX = player.getX();
        int newY = player.getY();

        if (key == KeyEvent.VK_UP) {
            newY -= 10;
        } else if (key == KeyEvent.VK_DOWN) {
            newY += 10;
        } else if (key == KeyEvent.VK_LEFT) {
            newX -= 10;
        } else if (key == KeyEvent.VK_RIGHT) {
            newX += 10;
        } else if (key == KeyEvent.VK_E) { // Tecla "E" para interagir
            if (currentNpc != null) {
                dialogMessage = currentNpc.interact(); // Executa a interação do NPC
                isDialogActive = true; // Ativa a caixa de diálogo
            }
        } else if (key == KeyEvent.VK_ESCAPE) { // Tecla "ESC" para fechar o diálogo
            isDialogActive = false; // Desativa a caixa de diálogo
        }

        // Verifica se a nova posição colide com algum bloco
        Rectangle newBounds = new Rectangle(newX, newY, player.getBounds().width, player.getBounds().height);
        if (!isColliding(newBounds)) {
            player.move(newX - player.getX(), newY - player.getY());
        }

        // Verifica se o jogador atingiu as coordenadas para mudar de tela
        if (player.getX() >= 390 && player.getX() <= 420 && player.getY() <= -10) {
            // Transporta o jogador para a segunda tela
            parentFrame.getContentPane().removeAll();
            parentFrame.add(new SecondScreen());
            parentFrame.revalidate();
            parentFrame.repaint();
        }

        // Exibe as coordenadas do jogador no console
        System.out.println("Jogador está em: (" + player.getX() + ", " + player.getY() + ")");

        // Limpa a mensagem e o NPC atual quando o jogador se move
        currentMessage = null;
        currentNpc = null;

        repaint();
    }

    @Override
    public void keyReleased(KeyEvent e) {}

    @Override
    public void keyTyped(KeyEvent e) {}
}

package JogoEducacional;

import java.awt.Image;
import java.awt.Rectangle;
import javax.imageio.ImageIO;
import java.io.File;
import java.io.IOException;
import java.awt.Graphics;

public class Player {
    private int x;
    private int y;
    private int size = 30; // Tamanho do sprite
    private Image[] sprites; // Array de sprites
    private int currentSpriteIndex; // Índice do sprite atual

    public Player(int x, int y) {
        this.x = x;
        this.y = y;
        this.currentSpriteIndex = 1; // Sprite inicial
        this.sprites = new Image[4]; // 4 sprites:a

        // Carregar os sprites
        try {
            sprites[0] = ImageIO.read(new File("Imagens\\costas.png")); // Cima
            sprites[1] = ImageIO.read(new File("Imagens\\frente.png")); // Baixo
            sprites[2] = ImageIO.read(new File("Imagens\\esquerda.png")); // Esquerda
            sprites[3] = ImageIO.read(new File("Imagens\\direita.png")); // Direita
        } catch (IOException e) {
            e.printStackTrace();
            System.out.println("Erro ao carregar os sprites do jogador.");
        }
    }

    public void move(int deltaX, int deltaY) {
        this.x += deltaX;
        this.y += deltaY;

        // Atualiza o sprite
        if (deltaY < 0) {
            currentSpriteIndex = 0; //Cima
        } else if (deltaY > 0) {
            currentSpriteIndex = 1; //Baixo
        } else if (deltaX < 0) {
            currentSpriteIndex = 2; //Esquerda
        } else if (deltaX > 0) {
            currentSpriteIndex = 3; //Direita
        }
    }

    public void draw(Graphics g) {
        if (sprites[currentSpriteIndex] != null) {
            g.drawImage(sprites[currentSpriteIndex], x, y, size, size, null);
        }
    }

    public int getX() {
        return x;
    }

    public int getY() {
        return y;
    }

    //a área do jogador
    public Rectangle getBounds() {
        return new Rectangle(x, y, size, size);
    }
}

package JogoEducacional;

import java.awt.Graphics;
import java.awt.Image;
import javax.imageio.ImageIO;
import java.io.File;
import java.io.IOException;

public abstract class NPC {
    private int x;
    private int y;
    private int size = 40; // Tamanho do sprite
    private Image[] sprites; // Array de sprites
    private int currentSpriteIndex; // Índice do sprite atual
    private String message;

    public NPC(int x, int y, String message, String[] spritePaths) {
        this.x = x;
        this.y = y;
        this.message = message;
        this.currentSpriteIndex = 1; // Sprite inicial (para baixo)
        this.sprites = new Image[4]; // 4 sprites

        // Carregar os sprites
        try {
            for (int i = 0; i < spritePaths.length; i++) {
                sprites[i] = ImageIO.read(new File(spritePaths[i]));
            }
        } catch (IOException e) {
            e.printStackTrace();
            System.out.println("Erro ao carregar os sprites do NPC.");
        }
    }

    public void draw(Graphics g) {
        if (sprites[currentSpriteIndex] != null) {
            g.drawImage(sprites[currentSpriteIndex], x, y, size, size, null);
        }
    }

    public boolean isPlayerNear(int playerX, int playerY) {
        return Math.abs(playerX - x) < 50 && Math.abs(playerY - y) < 50;
    }

    public String getMessage() {
        return message;
    }

    public int getX() {
        return x;
    }

    public int getY() {
        return y;
    }

    // Método abstrato para interações específicas de cada NPC
    public abstract String interact();
}

package JogoEducacional;

import javax.swing.*;
import java.awt.*;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import javax.imageio.ImageIO;
import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

public class SecondScreen extends JPanel implements KeyListener {
    private Player player;
    private NPC[] npcs;
    private String currentMessage; // Armazena a mensagem atual a ser exibida
    private NPC currentNpc; // Armazena o NPC atual que está interagindo
    private Image backgroundImage; // Imagem de fundo do mapa
    private String dialogMessage; // Mensagem atual do diálogo
    private boolean isDialogActive; // Indica se o diálogo está ativo

    // Lista de blocos de colisão
    private List<CollisionBlock> collisionBlocks;

    public SecondScreen() {
        this.setPreferredSize(new Dimension(800, 600));
        this.setBackground(Color.BLACK); // Fundo preto (será coberto pela imagem)
        this.setFocusable(true);
        this.addKeyListener(this);

        // Posiciona o jogador na parte inferior da tela
        player = new Player(400, 500);

        // Criando NPCs para a segunda tela
        npcs = new NPC[]{
            new Professor(200, 300),
            // Adicione mais NPCs aqui
        };

        // Inicializa a lista de blocos de colisão
        collisionBlocks = new ArrayList<>();

        // Adiciona blocos de colisão para as bordas do mapa
        collisionBlocks.add(new CollisionBlock(0, 0, 800, 20)); // Borda superior
        collisionBlocks.add(new CollisionBlock(0, 580, 800, 20)); // Borda inferior
        collisionBlocks.add(new CollisionBlock(0, 0, 20, 600)); // Borda esquerda
        collisionBlocks.add(new CollisionBlock(780, 0, 20, 600)); // Borda direita

        // Carregar a imagem de fundo da segunda tela
        try {
            backgroundImage = ImageIO.read(new File("mapa2.png")); // Substitua pelo caminho da sua imagem
        } catch (IOException e) {
            e.printStackTrace();
            System.out.println("Erro ao carregar a imagem de fundo da segunda tela.");
        }
    }

    // Método para verificar colisões
    private boolean isColliding(Rectangle bounds) {
        for (CollisionBlock block : collisionBlocks) {
            if (block.getBounds().intersects(bounds)) {
                return true; // Há colisão
            }
        }
        return false; // Não há colisão
    }

    @Override
    protected void paintComponent(Graphics g) {
        super.paintComponent(g);

        // Desenha a imagem de fundo redimensionada para ocupar toda a tela
        if (backgroundImage != null) {
            g.drawImage(backgroundImage, 0, 0, getWidth(), getHeight(), this);
        }

        // Desenha os blocos de colisão
        for (CollisionBlock block : collisionBlocks) {
            block.draw(g);
        }

        // Desenha o jogador
        player.draw(g);

        // Desenha os NPCs
        for (NPC npc : npcs) {
            npc.draw(g);

            // Verifica se o jogador está perto do NPC
            if (npc.isPlayerNear(player.getX(), player.getY())) {
                currentMessage = npc.getMessage(); // Atualiza a mensagem atual
                currentNpc = npc; // Armazena o NPC atual
            }
        }

        // Exibe a mensagem atual na tela, acima do NPC
        if (currentMessage != null && currentNpc != null) {
            g.setColor(Color.WHITE); // Cor do texto
            g.drawString(currentMessage, currentNpc.getX(), currentNpc.getY() - 10); // Texto acima do NPC
        }

        // Desenha a caixa de diálogo se estiver ativa
        if (isDialogActive) {
            drawDialogBox(g);
        }
    }

    // Método para desenhar a caixa de diálogo
    private void drawDialogBox(Graphics g) {
        int boxWidth = getWidth() - 40; // Largura da caixa de diálogo
        int boxHeight = 100; // Altura da caixa de diálogo
        int boxX = 20; // Posição X da caixa de diálogo
        int boxY = getHeight() - boxHeight - 20; // Posição Y da caixa de diálogo

        // Desenha o fundo da caixa de diálogo
        g.setColor(new Color(0, 0, 0, 200)); // Preto semi-transparente
        g.fillRect(boxX, boxY, boxWidth, boxHeight);

        // Desenha a borda da caixa de diálogo
        g.setColor(Color.WHITE);
        g.drawRect(boxX, boxY, boxWidth, boxHeight);

        // Desenha a mensagem do diálogo
        g.setColor(Color.WHITE);
        Font font = new Font("Arial", Font.PLAIN, 16);
        g.setFont(font);

        // Quebra a mensagem em várias linhas se necessário
        String[] lines = dialogMessage.split("\n");
        int lineHeight = g.getFontMetrics().getHeight();
        int textY = boxY + 30;

        for (String line : lines) {
            g.drawString(line, boxX + 20, textY);
            textY += lineHeight;
        }
    }

    @Override
    public void keyPressed(KeyEvent e) {
        int key = e.getKeyCode();

        int newX = player.getX();
        int newY = player.getY();

        if (key == KeyEvent.VK_UP) {
            newY -= 10;
        } else if (key == KeyEvent.VK_DOWN) {
            newY += 10;
        } else if (key == KeyEvent.VK_LEFT) {
            newX -= 10;
        } else if (key == KeyEvent.VK_RIGHT) {
            newX += 10;
        } else if (key == KeyEvent.VK_E) { // Tecla "E" para interagir
            if (currentNpc != null) {
                dialogMessage = currentNpc.interact(); // Executa a interação do NPC
                isDialogActive = true; // Ativa a caixa de diálogo
            }
        } else if (key == KeyEvent.VK_ESCAPE) { // Tecla "ESC" para fechar o diálogo
            isDialogActive = false; // Desativa a caixa de diálogo
        }

        // Verifica se a nova posição colide com algum bloco
        Rectangle newBounds = new Rectangle(newX, newY, player.getBounds().width, player.getBounds().height);
        if (!isColliding(newBounds)) {
            player.move(newX - player.getX(), newY - player.getY());
        }

        // Exibe as coordenadas do jogador no console
        System.out.println("Jogador está em: (" + player.getX() + ", " + player.getY() + ")");

        // Limpa a mensagem e o NPC atual quando o jogador se move
        currentMessage = null;
        currentNpc = null;

        repaint();
    }

    @Override
    public void keyReleased(KeyEvent e) {}

    @Override
    public void keyTyped(KeyEvent e) {}
}

package JogoEducacional;

public class IfElseNPC extends NPC {
    public IfElseNPC(int x, int y) {
        super(x, y, "Use 'if' e 'else' para tomar decisões no código!", new String[] {
            "Imagens\\velho.png",    // Sprite para cima
            "Imagens\\velho.png",  // Sprite para baixo
            "Imagens\\velho.png",  // Sprite para esquerda
            "Imagens\\velho.png"  // Sprite para direita
        });
    }

    @Override
    public String interact() {
        return "Senhora diz:\n Você sabia que pode usar a logica da programação no dia a dia?";
    }
}

package JogoEducacional;

import java.awt.Color;
import java.awt.Graphics;
import java.awt.Rectangle;

public class CollisionBlock {
    private int x;
    private int y;
    private int width;
    private int height;

    public CollisionBlock(int x, int y, int width, int height) {
        this.x = x;
        this.y = y;
        this.width = width;
        this.height = height;
    }

    // Retorna um retângulo que representa a área do bloco
    public Rectangle getBounds() {
        return new Rectangle(x, y, width, height);
    }

    // Desenha o bloco de colisão
    public void draw(Graphics g) {
        g.setColor(new Color(255, 0, 0, 128)); // Vermelho semi-transparente
        g.fillRect(x, y, width, height);
        g.setColor(Color.RED); // Borda vermelha
        g.drawRect(x, y, width, height);
    }
}

package JogoEducacional;

public class Professor extends NPC {
    private int interactionStep; // Contador para controlar a parte da mensagem
    public Professor(int x, int y) {
        super(x, y, "Olá! Vou te explicar como funciona o IF e ELSE.", new String[] {
            "Imagens\\rene.png",    // cima
            "Imagens\\rene.png",  // baixo
            "Imagens\\rene.png",  //esquerda
            "Imagens\\rene.png"  // direita
        });
        this.interactionStep = 0; // Inicializa o contador
    }

    @Override
    public String interact() {
        String message;
        if (interactionStep == 0) {
            message = "Professor diz: \n 'O IF e ELSE são usados para tomar decisões no código.'";
            interactionStep++; // Avança para a próxima parte
        } else {
            message = "Professor\n exemplo: if (maçãs>2) { dividir com o colega } else { comer sozinho }";
            interactionStep = 0; // Reinicia o contador
        }
        return message;
    }
}

     collisionBlocks.add(new CollisionBlock(0, 0, 390, 40));
        collisionBlocks.add(new CollisionBlock(450, 0, 280, 40));
        collisionBlocks.add(new CollisionBlock(0, 550, 800, 20));
        collisionBlocks.add(new CollisionBlock(10, 0, 50, 600));
        collisionBlocks.add(new CollisionBlock(720, 0, 50, 620));
        collisionBlocks.add(new CollisionBlock(230, 480, 120, 60));
        collisionBlocks.add(new CollisionBlock(170, 310, 150, 20));
        collisionBlocks.add(new CollisionBlock(170, 390, 20, 20));
        collisionBlocks.add(new CollisionBlock(430, 450, 190, 10));

        collisionBlocks.add(new CollisionBlock(170, 100, 155, 110));
        collisionBlocks.add(new CollisionBlock(140, 180, 30, 30));
        collisionBlocks.add(new CollisionBlock(460, 100, 155, 110));
        collisionBlocks.add(new CollisionBlock(430, 180, 30, 25));
        collisionBlocks.add(new CollisionBlock(430, 270, 220, 110));
        collisionBlocks = new ArrayList<>();
        collisionBlocks.add(new CollisionBlock(0, 0, 390, 40));
        collisionBlocks.add(new CollisionBlock(450, 0, 280, 40));
        collisionBlocks.add(new CollisionBlock(0, 550, 800, 20));
        collisionBlocks.add(new CollisionBlock(10, 0, 50, 600));
        collisionBlocks.add(new CollisionBlock(720, 0, 50, 620));
        collisionBlocks.add(new CollisionBlock(230, 480, 120, 60));
        collisionBlocks.add(new CollisionBlock(170, 310, 150, 20));
        collisionBlocks.add(new CollisionBlock(170, 390, 20, 20));
        collisionBlocks.add(new CollisionBlock(430, 450, 190, 10));

        collisionBlocks.add(new CollisionBlock(170, 100, 155, 110));
        collisionBlocks.add(new CollisionBlock(140, 180, 30, 30));
        collisionBlocks.add(new CollisionBlock(460, 100, 155, 110));
        collisionBlocks.add(new CollisionBlock(430, 180, 30, 25));
        collisionBlocks.add(new CollisionBlock(430, 270, 220, 110));